schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Cart
  @join__type(graph: CART, key: "id")
  @join__type(graph: CART_ITEMS, key: "id")
{
  id: UUID
  user_id: UUID @join__field(graph: CART)
  is_complete: Boolean @join__field(graph: CART)
  created_at: timestamptz @join__field(graph: CART)
  cart_items_filter(limit: Int, orderBy: String): [CartItem] @join__field(graph: CART_ITEMS)
  cart_items_batched: [CartItem] @join__field(graph: CART_ITEMS)
}

type CartItem
  @join__type(graph: CART_ITEMS)
{
  id: UUID
  product_id: UUID
  cart_id: UUID
  quantity: Int
}

scalar join__FieldSet

enum join__Graph {
  CART @join__graph(name: "cart", url: "http://localhost:9080/")
  CART_ITEMS @join__graph(name: "cart_items", url: "http://localhost:9090/")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: CART)
  @join__type(graph: CART_ITEMS)
{
  carts: [Cart] @join__field(graph: CART)
  cart_items(limit: Int, orderBy: String): [CartItem] @join__field(graph: CART_ITEMS)
}

scalar timestamptz
  @join__type(graph: CART)
  @join__type(graph: CART_ITEMS)

scalar UUID
  @join__type(graph: CART)
  @join__type(graph: CART_ITEMS)
